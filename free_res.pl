#!/usr/bin/perl
#
# Looks through a given interaction data file to find how many of a particular residue are involved in interactions and which or not. Ie if looking of Y's it'll give How many are interacting and how many are free. 
# USAGE free_res.pl DAT RES DIST
# DAT needs to be a file generated by charge_dist or ring_dist

open(FH, "$ARGV[0]") || die "Couldn't open $ARGV[0]: $!\n";

#Read lines in looking for interactions
$i = 0;
while ($line = readline(FH)) {
	if ($line =~ /^[#@].*/) {
		if($line =~ /.*legend.*/) {
			$line =~ s/.*\s"//;
			$line =~ s/".*//;
			push(@pairs, $line);
		}
		next;
		
	}

	@params = split(/\s+/,$line);
	$params[0] =~ s/,//;
	$time[$i] = $params[0];
	for($j = 1; $j < scalar(@params) ; $j ++) {
		if ($params[$j] <= $ARGV[2] ) {
			$inter[$i] = "$inter[$i],$j";
		} 
	}
	$i++;
}
$end = $i;

$total = 0;
$found = "";
for ($i = 0; $i < @pairs; $i ++ ) {
	@res = split(/-/,$pairs[$i]);
	if ($res[0] =~ /.*$ARGV[1].*/ && $found !~ /.*$res[0].*/) {
		$total++;
		$found = "$found $res[0]";
	 
	} elsif ($res[1] =~ /.*$ARGV[1].*/ && $found !~ /.*$res[1].*/) {
		$total++;
		$found = "$found $res[1]";
	}
}
my %out;
for ($i = 0; $i < $end; $i++ ){
	@params = split(/,/, $inter[$i]);
	$c = 0;
	$found = "";
	for ($j = 0; $j < scalar(@params); $j++) { 
		if ($pairs[$params[$j]] !~ /.*$ARGV[1].*/) {
			next;
		}
		@res = split(/-/,$pairs[$params[$j]]);
		if ($res[0] =~ /.*$ARGV[1].*/ && $found !~ /.*$res[0].*/) {
			$c++;
			$found = "$found $res[0]";
		 
		} elsif ($res[1] =~ /.*$ARGV[1].*/ && $found !~ /.*$res[1].*/) {
			$c++;
			$found = "$found $res[1]";
		}
	}
	$free = $total - $c;
	$out{$time[$i]} = "$c\t$free";
#	print "$time[$i]\t$c\t$free\n";
}


@order = sort { $a <=> $b } keys %out;
for ($i = 0; $i < @order; $i++ ) {
	print "$order[$i]\t$out{$order[$i]}\n";
}
#print "$total\n";
print <<EOF;
@ s0 legend "Interacting"
@ s1 legend "Free"
@ sort s0 X ascending
@ sort s1 X ascending
@ yaxis label "# residues"
@ xaxis label "MD steps (x 10000)"
EOF


